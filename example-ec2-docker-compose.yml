version: '3.8'

services:
  db:
    image: ankane/pgvector:latest
    container_name: silo-down-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-silodown}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  flyway:
    build:
      context: .
      dockerfile: Dockerfile.flyway
    container_name: silo-down-flyway
    command: flyway -baselineOnMigrate=true -validateMigrationNaming=true migrate
    volumes:
      - ./migrations:/flyway/sql
      - ./flyway.conf:/flyway/conf/flyway.conf
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-silodown}
      - POSTGRES_HOST=db
      - FLYWAY_URL=jdbc:postgresql://db:5432/${POSTGRES_DB:-silodown}
      - FLYWAY_USER=${POSTGRES_USER:-postgres}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        - NODE_ENV=production
    container_name: silo-down-web
    restart: always
    expose:
      - "${PORT:-80}"
    volumes:
      - ./public:/app/public
    env_file:
      - .env
    environment:
      - ENV=production
      - NODE_ENV=production
      - PORT=${PORT:-80}
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-silodown}
    command: node server.js
    depends_on:
      flyway:
        condition: service_completed_successfully
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public:/app/public
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
    networks:
      - app-network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    command:
      - sh
      - -c
      - |
        nginx -g 'daemon off;'

  certbot:
    image: certbot/certbot
    depends_on:
      - nginx
    env_file:
      - .env
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    entrypoint: /bin/sh
    command:
      - -c
      - |
        certbot certonly --webroot --webroot-path=/var/www/certbot \
          --email crhill+silodown@pasleyhill.com --agree-tos --no-eff-email \
          -d "$DOMAIN_NAME";
        chmod -R 755 /etc/letsencrypt/live
        chmod -R 755 /etc/letsencrypt/archive
        while true; do
          sleep 12h;
          certbot renew;
          chmod -R 755 /etc/letsencrypt/live
          chmod -R 755 /etc/letsencrypt/archive
        done

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
